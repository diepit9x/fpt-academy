package daos;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;

import entities.May;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Root;
import models.PagedResult;
import utils.HibernateUtil;

public class MayDAO {
	public List<May> findAllMay(String search) {
		try (Session session = HibernateUtil.getSessionFactory().openSession()) {
			Query<May> query = session.createQuery("FROM May m WHERE :search IS NULL OR :search = '' OR m.maMay = :search", May.class);
			query.setParameter("search", search);
			return query.getResultList();
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
		return new ArrayList<>();
	}
	
	public PagedResult<May> findAllMay(String search, int page, int pageSize) {
	    try (Session session = HibernateUtil.getSessionFactory().openSession()) {
	        // dem tong so ban gi
	        String countHql = "SELECT COUNT(m) FROM May m WHERE :search IS NULL OR :search = '' OR CAST(m.maMay AS string) LIKE :search";
	        Query<Long> countQuery = session.createQuery(countHql, Long.class);
	        countQuery.setParameter("search", search != null ? "%" + search + "%" : null);

	        Long totalRecords = countQuery.getSingleResult();
	        int totalPages = (int) Math.ceil((double) totalRecords / pageSize);

	        //lay danh sach ket qua
	        String listHql = "FROM May m WHERE :search IS NULL OR :search = '' OR CAST(m.maMay AS string) LIKE :search";
	        Query<May> listQuery = session.createQuery(listHql, May.class);
	        listQuery.setParameter("search", search != null ? "%" + search + "%" : null);
	        listQuery.setFirstResult((page - 1) * pageSize);
	        listQuery.setMaxResults(pageSize);

	        List<May> mays = listQuery.getResultList();

	        return new PagedResult<>(page, totalPages, mays);
	    } catch (Exception e) {
	        System.err.println("Error: " + e.getMessage());
	    }
	    return new PagedResult<>(page, 0, new ArrayList<>());
	}



	
	public May findById(Integer maMay) {
		try (Session session = HibernateUtil.getSessionFactory().openSession()) {
			return session.get(May.class, maMay);
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
		return null;
	}
	
	public boolean insert(May may) {
		if (may == null) {
			return false;
		}
		try (Session session = HibernateUtil.getSessionFactory().openSession()) {
			Transaction t = session.beginTransaction();
			session.persist(may);
			t.commit();
			return true;
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
		return false;
	}
	
	public boolean update(May may) {
		try (Session session = HibernateUtil.getSessionFactory().openSession()) {
			May existingMay = findById(may.getMaMay());
			if (existingMay == null) {
				throw new Exception("Mã máy không tồn tại");
			}
			may.setMaMay(existingMay.getMaMay());
			
			Transaction t = session.beginTransaction();
			session.merge(may);
			t.commit();
			return true;
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
		return false;
	}
	
	public boolean delete(Integer maMay) {
		try (Session session = HibernateUtil.getSessionFactory().openSession()) {
			May existingMay = findById(maMay);
			if (existingMay == null) {
				throw new Exception("Mã máy không tồn tại");
			}
			Transaction t = session.beginTransaction();
			session.remove(existingMay);
			t.commit();
			return true;
		} catch (Exception e) {
			System.err.println(e.getMessage());
		}
		return false;
	}
}
