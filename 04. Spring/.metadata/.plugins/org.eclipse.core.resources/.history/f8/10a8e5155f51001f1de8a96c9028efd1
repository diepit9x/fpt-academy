package fa.training.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import fa.training.dto.ContentDTO;
import fa.training.entity.Content;
import fa.training.entity.Member;
import fa.training.response.ResponseObject;
import fa.training.service.ContentService;
import fa.training.util.SessionUtil;
import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
@RequestMapping("/content")
public class ContentController {
    private final ContentService contentService;

    @PostMapping("/create")
    public ResponseEntity<ResponseObject> create(HttpSession session, @Valid @ModelAttribute ContentDTO contentDTO,
	    BindingResult bindingResult) {
	Member memberSession = SessionUtil.getLoggedInUser(session);
	if (memberSession == null) {
	    return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
		    .body(ResponseObject.builder().status(401).object("Please sign in").build());
	}
	Map<String, String> errors = new HashMap<>();
	if (bindingResult.hasErrors()) {
	    bindingResult.getFieldErrors().forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));
	    return ResponseEntity.badRequest().body(ResponseObject.builder().status(400).object(errors).build());
	}
	try {
	    Content content = contentService.create(session, contentDTO);
	    return ResponseEntity.ok(ResponseObject.builder().status(200).object(content).build());
	} catch (Exception e) {
	    return ResponseEntity.badRequest()
		    .body(ResponseObject.builder().status(400).object(e.getMessage()).build());
	}
    }

    @GetMapping("/all-contents")
    public ResponseEntity<ResponseObject> findAll(HttpSession httpSession) {
	Member memberSession = SessionUtil.getLoggedInUser(httpSession);
	if (memberSession == null) {
	    return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
		    .body(ResponseObject.builder().status(401).object("Please sign in").build());
	}
	try {
	    List<Content> contents = contentService.findAll(httpSession);
	    return ResponseEntity.ok(ResponseObject.builder().status(200).object(contents).build());
	} catch (Exception e) {
	    return ResponseEntity.badRequest()
		    .body(ResponseObject.builder().status(400).object(e.getMessage()).build());
	}
    }

    @GetMapping("/get-content/{id}")
    public ResponseEntity<ResponseObject> findById(HttpSession httpSession, @PathVariable Integer id) {
	Member memberSession = SessionUtil.getLoggedInUser(httpSession);
	if (memberSession == null) {
	    return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
		    .body(ResponseObject.builder().status(401).object("Please sign in").build());
	}
	try {
	    Content content = contentService.findById(httpSession, id);
	    return ResponseEntity.ok(ResponseObject.builder().status(200).object(content).build());
	} catch (Exception e) {
	    return ResponseEntity.badRequest()
		    .body(ResponseObject.builder().status(400).object(e.getMessage()).build());
	}
    }

    @PostMapping("/update")
    public ResponseEntity<ResponseObject> update(HttpSession httpSession, @Valid @ModelAttribute ContentDTO contentDTO,
	    BindingResult bindingResult) {
	
	Member memberSession = SessionUtil.getLoggedInUser(httpSession);
	if (memberSession == null) {
	    return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
		    .body(ResponseObject.builder().status(401).object("Please sign in").build());
	}
	Map<String, String> errors = new HashMap<>();
	if (bindingResult.hasErrors()) {
	    bindingResult.getFieldErrors().forEach(error -> errors.put(error.getField(), error.getDefaultMessage()));
	    return ResponseEntity.badRequest().body(ResponseObject.builder().status(400).object(errors).build());
	}
	try {
	    Content content = contentService.update(httpSession, contentDTO);
	    return ResponseEntity.ok(ResponseObject.builder().status(200).object(content).build());
	} catch (Exception e) {
	    return ResponseEntity.badRequest()
		    .body(ResponseObject.builder().status(400).object(e.getMessage()).build());
	}
    }

}
