package fa.training.service;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Service;

import fa.training.dto.ContentDTO;
import fa.training.entity.Content;
import fa.training.exception.DataNotFoundException;
import fa.training.repository.ContentRepository;
import fa.training.util.SessionUtil;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ContentServiceImp implements ContentService {
    private final ContentRepository contentRepository;

    @Override
    public Content create(HttpSession httpSession, ContentDTO contentDTO) {
	Content newContent = Content.builder().title(contentDTO.getTitle()).brief(contentDTO.getBrief())
		.content(contentDTO.getContent()).member(SessionUtil.getLoggedInUser(httpSession)).build();
	return contentRepository.save(newContent);
    }

    @Override
    public Content update(HttpSession httpSession, ContentDTO contentDTO) {
	Content existingContent = findById(httpSession, contentDTO.getContentId());
	Integer authorId = existingContent.getMember().getId();
	Integer memberId = SessionUtil.getLoggedInUser(httpSession).getId();
	if (!authorId.equals(memberId)) {
	    throw new DataNotFoundException("Access Denied");
	}
	existingContent.setTitle(contentDTO.getTitle());
	existingContent.setBrief(contentDTO.getBrief());
	existingContent.setContent(contentDTO.getContent());

	return contentRepository.save(existingContent);
    }

    @Override
    public Content findById(HttpSession session, Integer contentId) {
	Content content = contentRepository.findByMemberAndId(SessionUtil.getLoggedInUser(session), contentId)
		.orElseThrow(() -> new DataNotFoundException("Content not found"));
	return content;
    }

    @Override
    public List<Content> findAll(HttpSession httpSession) {
	return contentRepository.findAllByMember(SessionUtil.getLoggedInUser(httpSession));
    }

    @Override
    public void delete(HttpSession httpSession, Integer contentId) {
	Content existingContent = findById(httpSession, contentId);
	Integer authorId = existingContent.getMember().getId();
	Integer memberId = SessionUtil.getLoggedInUser(httpSession).getId();
	if (!authorId.equals(memberId)) {
	    throw new DataNotFoundException("Access Denied");
	}
	contentRepository.delete(existingContent);
    }

}
