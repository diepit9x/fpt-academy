package fa.training.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import fa.training.entities.LineItem;
import fa.training.util.DBUtils;
import fa.training.util.SQLCommand;

public class LineItemDAOImpl implements LineItemDAO {
    private Connection connection = null;
    private PreparedStatement preparedStatement = null;
    private CallableStatement callableStatement = null;
    private ResultSet results = null;

    @Override
    public List<LineItem> getAllItemsByOrderId(int orderId) throws SQLException {
	List<LineItem> lineItems = new ArrayList<>();
	LineItem lineItem = null;
	try {
	    connection = DBUtils.getInstance().getConnection();
	    preparedStatement = connection.prepareStatement(SQLCommand.LINEITEM_QUERY_FIND_BY_ORDERID);
	    preparedStatement.setInt(1, orderId);
	    results = preparedStatement.executeQuery();
	    while (results.next()) {
		lineItem = new LineItem();
		lineItem.setOrderId(results.getInt("order_id"));
		lineItem.setProductId(results.getInt("product_id"));
		lineItem.setQuantity(results.getInt("quantity"));
		lineItem.setPrice(results.getDouble("price"));
		lineItems.add(lineItem);
	    }
	} finally {
	    try {
		if (connection != null) {
		    connection.close();
		}
		if (preparedStatement != null) {
		    preparedStatement.close();
		}
	    } catch (SQLException e) {
		e.printStackTrace();
	    }
	}
	return lineItems;
    }

    @Override
    public Double computeOrderTotal(int orderId) throws SQLException {
	try {
	    connection = DBUtils.getInstance().getConnection();
	    callableStatement = connection.prepareCall(SQLCommand.LINEITEM_QUERY_COMPUTE_ORDER_TOTAL);
	    callableStatement.setInt(2, orderId);
	    callableStatement.registerOutParameter(1, Types.DOUBLE);
	    callableStatement.execute();
	    return callableStatement.getDouble(1);
	} finally {
	    try {
		if (connection != null) {
		    connection.close();
		}
		if (preparedStatement != null) {
		    preparedStatement.close();
		}
	    } catch (SQLException e) {
		e.printStackTrace();
	    }
	}
	return 0D;
    }

    @Override
    public boolean addLineItem(LineItem lineItem) throws SQLException {
	// TODO Auto-generated method stub
	return false;
    }

    @Override
    public boolean updateLineItem(int orderId, int productId, LineItem lineItem) throws SQLException {
	// TODO Auto-generated method stub
	return false;
    }

    @Override
    public boolean deleteLineItem(int orderId, int productId) throws SQLException {
	// TODO Auto-generated method stub
	return false;
    }

}
